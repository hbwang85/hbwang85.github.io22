<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Henry Wang's Blog]]></title>
  <link href="http://hbwang85.github.io/atom.xml" rel="self"/>
  <link href="http://hbwang85.github.io/"/>
  <updated>2015-08-04T12:58:57+08:00</updated>
  <id>http://hbwang85.github.io/</id>
  <author>
    <name><![CDATA[HaiBin Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KVC &amp; KVO]]></title>
    <link href="http://hbwang85.github.io/blog/2015/07/20/kvc-and-kvo/"/>
    <updated>2015-07-20T15:10:25+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/07/20/kvc-and-kvo</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>KVC is a fundamental technology when working with key-value observing, Cocoa bindings, Core Data and making your application AppleScript-able. It&rsquo;s really powerful, But few know about the detail. Especially for the collection operators. As part of KVC, collection operators help make many routine tasks simple.</p>

<!--more-->


<p></p>

<h2>KVC Fundament</h2>

<p>Key-Value Coding is a mechanism for accessing an object&rsquo;s properties indirectly, useing strings to identify properties, rather than through invocation of an accessor method or accessing them directly through instnce variable. It is a fundamental technology when working with key-value observing, Cocoa bindings, Core Data and making your application AppleScript-able.</p>

<p>Simply We can get the value by invoking valueForKey:(valueForKeyPath). If there is no accessor or instance variable for the specified key, then the receiver sends itself a valueForUndefinedKey: message, and the default implementation of that message raises an NSUndefinedKeyException.</p>

<p>On the other hand, we can set the value of the specified key by invoking setValue: forKey:. If the specified key doesn&rsquo;t exist, the reveiver is sent a setValue:forUndefinedKey: message, and the message will raise an NSUndefinedKeyException.</p>

<p>The essential methods for key-value coding are declared in the NSKeyValueCoding Objective-C informal protocol and default implementations are provided by NSObject.</p>

<p>Key-value coding supports properties with object values, as well as the scalar types and structs. Non-object parameters and return types are detected and automatically wrapped, and unwrapped.</p>

<p>For scalar types, the instances will be wrapped to NSNumber instances，
<img class="center" src="http://hbwang85.github.io/images/kvc/scalar1.png">
<img class="center" src="http://hbwang85.github.io/images/kvc/scalar2.png"></p>

<p>For Struct，the instances will be wrapped as NSValue instances. Remember that NSValue and NSNumber both are inheritated from NSObject.<br/>
<img class="center" src="http://hbwang85.github.io/images/kvc/struct.png"></p>

<p>when you access a property using the dot syntax, you invoke the receiver&rsquo;s standard accessor methods.</p>

<h2>Collection Operators</h2>

<p>Collection operators allow actions to be performed on the items of a collection using key path notation and an action operator. This article describes the available collection operators, example key paths, and the results they’d produce. The format is as below:</p>

<p><img class="center" src="http://hbwang85.github.io/images/kvc/collection_operators_format.png"></p>

<p>Collection operators are specialized key paths that are passed as the parameter to the valueForKeyPath: method. The operator is specified by a string preceded by an at sign (@). The key path on the left side of the collection operator, if present, determines the array or set, relative to the receiver, that is used in the operation. The key path on the right side of the operator specifies the property of the collection that the operator uses. Figure 1 illustrates the operator key path format.</p>

<p>We can use it as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[object valueForKeyPath:@"&lt;keypathToCollection&gt;.&lt;@collectionOperator&gt;.&lt;keypathToProperty&gt;"];</span></code></pre></td></tr></table></div></figure>


<p>This is the same as :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[object valueForKeyPath:@"&lt;keypathToCollection&gt;"] valueForKeyPath:@"&lt;@collectionOperators&gt;.&lt;keypathToProperty&gt;"];
</span></code></pre></td></tr></table></div></figure>


<p>The obvious advantage is their consicion, but the big disadvantage is that we don’t get compile-time errors when we misuse them and nor do we get code-completion</p>

<p>The Desirables</p>

<p>Firstly, we should be explicit about what types of objects we expect to be in the collection. This should give us code-completion on the key path and an error if the key path doesn’t exist on objects of the pre-specified type.</p>

<p>Secondly, some collection operators demand that the key path leads to a specific type of object. For example, . In these cases, we should get a compile-time error if the key path leads to an object of an invalid type.</p>

<p>Finally, we should only be allowed to use the documented collection operators, and we should get compile-time errors if we try to use an undefined operator.</p>

<p>Collection Operators can be devided to 3 kinds:</p>

<h3>Simple Colletion Operators</h3>

<blockquote><p>@avg
@max
@min
@sum
@count</p></blockquote>

<p>Note:<br/>
1. If you&rsquo;d like to call @max or @min, the compared property objects must support comparison with each other;<br/>
2. For the @count, the keypath to the right of the operator is ignored. And the difference between @count and count method are as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@[@"a",@"b"] count]
</span><span class='line'>    // -&gt; 2
</span><span class='line'>[@[@"a",@"b"] valueForKey:@"@count"]
</span><span class='line'>    // -&gt; @(2)
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Object Operators</h3>

<blockquote><p>@distinctUnionOfObjects
@unionOfObjects</p></blockquote>

<p>Note:<br/>
1. @unionOfObjects, is basically useless,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[object valueForKeypath:@"@unionOfObjects.&lt;keypathToProperty&gt;"];  </span></code></pre></td></tr></table></div></figure>


<p>is exactly the same as :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[object valueForKey:@"&lt;keypathToProperty&gt;"];</span></code></pre></td></tr></table></div></figure>


<h3>Array and Set Operators</h3>

<blockquote><p>@unionOfArray
@distinctUnionOfArrays
@distinctUnionOfSet</p></blockquote>

<h3>KVC + self = perfect</h3>

<p>You can use self as the <keypathToProperty>. for example, if you&rsquo;d like to flatten a array as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@[@[@(1),@(2),@(3)]] valueForKeyPath:@"@unionOfArray.self"];
</span><span class='line'>       // @[@(1),@(2),@(3)]</span></code></pre></td></tr></table></div></figure>


<p>
If the wrap lever is more than one, e.g. 2, you can flatten it as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[@[@[@[@(1),@(2),@(3)]]] valueForKeyPath:@"@unionOfArray.self.@unionOfArray.self"];
</span><span class='line'>       // @[@(1),@(2),@(3)]
</span><span class='line'>       // the first "@unionOfArray.self" is used as &lt;keypathToCollection&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ol>
<li>Key-Value Coding Programming Guide</li>
<li><a href="http://bou.io/KVCCustomOperators.html">http://bou.io/KVCCustomOperators.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Development]]></title>
    <link href="http://hbwang85.github.io/blog/2015/07/19/test-driven-development/"/>
    <updated>2015-07-19T07:49:13+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/07/19/test-driven-development</id>
    <content type="html"><![CDATA[<p>可运行的简洁代码是关于“测试驱动开发”（TDD）目标的精辟概括。 TDD带给我们前所未有的好处：
1. 仅当自动化测试失败的时候才需要编写新的代码；
2. 可以以TDD为依据进行重构，去掉重复的代码；
3. 自动化测试可以作为help manual， 代码中不再需要过多的注释。</p>

<p>当然，它也有弊端：
1. 必须developer自己写测试；
2. 我们的设计必须遵循高内聚、低耦合的原则，否则不便于测试；
3. 快速响应，实时的维护自动化测试；</p>

<p>TDD的经典三部曲
1. 红色指示条：根据需求编写一个测试，当然此时这个测试无法通过编译；
2. 绿色指示条：编写代码，使测试通过，这个过程可谓想方设法，可谓不择手段；
3. 重构： 去除单纯由于使测试通过的重复部分。</p>

<p>3A
编写测试时可以遵循以下3个步骤：
Build: 创建对象，我们希望每个测试在执行之前都执行此步；
Operation： 执行测试；
Check：验证结果。</p>

<p>这样的模式又带来两个问题：
1. 性能：如果众多测试中使用类似的对象，我们希望对象只被创建一次；
2. 测试隔离：每个测试的通过与否都不应该与其他测试相关。这样，如果每个对象都只被创建了一次，其中一个测试改变了对象，它必然影响其他测试。
在xUnit框架中，每个测试在执行前都会调用setup()方法创建对象，执行结束后调用teardown()方法释放对象。</p>

<p>要TDD我们应该怎么做：
1. 维护一张测试列表，根据需求制定并维护一张测试列表；
2. 测试优先， 在编写代码前先编写测试；
3. 显示数据，测试中避免使用magic number；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa Notes]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/25/reactivecocoa-notes/"/>
    <updated>2015-06-25T15:10:35+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/25/reactivecocoa-notes</id>
    <content type="html"><![CDATA[<h2>ReactiveCocoa试图解决什么问题</h2>

<p>经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：</p>

<ol>
<li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li>
<li>传统MVC架构的问题：Controller比较复杂，可测试性差</li>
<li>提供统一的消息传递机制</li>
</ol>


<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于引用计数的，为了避免循环引用问题，在block中如果要引用self，需要使用@weakify(self)和@strongify(self)来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难</p>

<ol>
<li>RAC provides signals (represented by RACSignal) that capture present and future values</li>
<li>By chaining, combining, and reacting to signals, software can be written declaratively, without the need for code that continually observes and updates values.</li>
<li>It provides a single, unified approach to dealing with asynchronous behaviors, including delegate methods, callback blocks, target-action mechanisms, notifications, and KVO</li>
</ol>


<p>Signals can also represent asynchronous operations, much like futures and promises. This greatly simplifies asynchronous software, including networking code</p>

<p>unlike KVO notifications, signals can be chained together and operated on (pipeline)</p>

<p>Signal Commend</p>

<p>Signal cold  hot:
cold signal : it will not do any work until subscription</p>

<p>reduceEach: Unpacks each RACTuple in the receiver and maps the values to a new value   n&ndash;>1</p>

<p>Map: takes a list and return it into another list of the same length, &ldquo;mapping&rdquo; each value in the original list into a new value in the resulting list.       1&ndash;>1</p>

<p>Filter: Filtering a list just returns a new list containing all of the original entries, minus the entries that didn&rsquo;t return true from a test.</p>

<p>Fold: combines each entry in a list down to a single value. It&rsquo;s often referred to as &ldquo;combine&rdquo;.</p>

<p>RACScheduler: used to control when and where work is performed</p>

<p>Subscriptions: made on signals. when you want to be notified that a new value is sent(either next, error or completion).</p>

<p>Macros
RAC(Object, keypath): It performs a one-way binding of the right-hand value of the expression to the key path in question. Values must be NSObjects
RACObserve(Object, keypath)</p>

<p>RACCommend :
1. Create and subscribe to a signal in response to some action. Usually the action trigging a command is UI-driven, like when a button is clicked.
2. Command can be automatically disabled based on a signal, and this disabled state can be represented in a UI by disabling any controls associated with the command</p>

<p>Cold Signal: Signals are typically lazy, meaning that they only do work and send signals when someone has subscribed to them. With each additional subscription, work is re-done. For trivial operations, this is acceptable, and in fect, desirable.</p>

<p>Hot Signal : Sometimes we want work to be done immediately. This type of signal is called a hot signal. It&rsquo;s very rare to use a hot signal.
Signals by default are cold</p>

<p>Multicasting:
1. Signal: each new time a subscriber is added, its work is performed.
2. Multicast connection: subscribe to the signal that it&rsquo;s created with and when it&rsquo;s passed new values, sends those values through to the signal(which is exposed as a public property). You can subscribe to this signal as many as you want, and the work performed upon subscription is only done once.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storyboard for Tableview]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/16/storyboard-for-tableview/"/>
    <updated>2015-06-16T10:49:44+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/16/storyboard-for-tableview</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>Our team switch to use storyboard for configuring UI components for currrent project.  In the past, I used code to configuring UI components, and there was no issue for tablecell height autofit by using layoutSubviews or other methods. However, as a newbie for storyboard, I encountered this issue. I cann&rsquo;t layout tablecell with correct height. After days of learning and research, I have found the method to resolve it so I&rsquo;d like to write an article to summary it.</p>

<!--more-->


<p></p>

<h2>Storyboard</h2>

<ol>
<li><p>I use UILabel to show multiple lines content. The bottom spacing between label and parent view should not be constant but should be required, it shouble be greater than XX, which is shown as follow:<br/>
<img class="center" src="http://hbwang85.github.io/images/tableview/bottom_space.png"></p></li>
<li><p>The content for the label will be in the vertical center by default, which will show white space on the top and bottom of the label,  if you want to compress the label size you can set the &ldquo;content hugging priority&rdquo;:<br/>
<img class="center" src="http://hbwang85.github.io/images/tableview/content_hugging_priority.png"></p></li>
<li><p>If you want to customize one imageview height for e.g. 100 in general, and should be considered the first one to compress the size, you should add two constraints, one is height equal 100 as required, another is height less than 100 as required, and reduce the &ldquo;Content Comperssion Resistance Priority&rdquo; from 750 to a small number, e.g. 250:<br/>
<img src="http://hbwang85.github.io/images/tableview/imageview_height.png">
<img src="http://hbwang85.github.io/images/tableview/compression_resistance_priority.png"></p></li>
</ol>


<h2>Code</h2>

<ol>
<li>Should create a global tablecell variable to calculate tablecell height;</li>
<li>In the API"htightForRowAtIndexPath":

<ul>
<li>Stuff the content to tablecell firstly;</li>
<li>update tablecell bounds to CGRectMake(0, 0, CGRectGetWidth(tableView.frame), tableView.rowHeight) in case of rotation or other scenario;</li>
<li>set the label&rsquo;s preferredMaxLayoutWidth to bounds.size.width-XX, XX is equal to the left padding + right padding + 32, this step could be move to the update bounds function;</li>
</ul>
</li>
<li>calculate the total height by systemLayoutSizeFittingSize(UILayoutFittingCompressedSize).height+1 (1 is the padding between content view and table cell);</li>
<li>Can cache tablecell height by using NSDictionary and using indexPath as the key;</li>
<li>If you use UITextView instead of UILabel, the total height shouble the height calculated by systemLayoutSizeFittingSize + the UITextView height. you can read the reference for more detail.</li>
</ol>


<h2>Reference</h2>

<ol>
<li><a href="http://www.cocoachina.com/industry/20140604/8668.html">http://www.cocoachina.com/industry/20140604/8668.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Edit Gitignore File for Xcode Project]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/11/how-to-edit-git-ignore-file/"/>
    <updated>2015-06-11T10:00:49+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/11/how-to-edit-git-ignore-file</id>
    <content type="html"><![CDATA[<p>A gitignore file specifies intentionallly untracked files that Git should ignore. Each line in a gitignore file sepecifies a pattern. We can see the detail as follows:</p>

<!--more-->


<p></p>

<h2>PATTERN FORMAT</h2>

<ul>
<li><p>A blank line matches no files, so it can serve as a separator for readability.</p></li>
<li><p>A line starting with # serves as a comment. Put a backslash (&ldquo;\&rdquo;) in front of the first hash for patterns that begin with a hash.</p></li>
<li><p>Trailing spaces are ignored unless they are quoted with backslash (&ldquo;\&rdquo;).</p></li>
<li><p>An optional prefix &ldquo;!&rdquo; which negates the pattern; any matching file excluded by a previous pattern will become included again. It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. Put a backslash (&ldquo;\&rdquo;) in front of the first &ldquo;!&rdquo; for patterns that begin with a literal &ldquo;!&rdquo;, for example, &ldquo;!important!.txt&rdquo;.</p></li>
<li><p>If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory. In other words, foo/ will match a directory foo and paths underneath it, but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works in general in Git).</p></li>
<li><p>If the pattern does not contain a slash /, Git treats it as a shell glob pattern and checks for a match against the pathname relative to the location of the .gitignore file (relative to the toplevel of the work tree if not from a .gitignore file).</p></li>
</ul>


<p>Two consecutive asterisks (&ldquo;**&rdquo;) in patterns matched against full pathname may have special meaning:</p>

<ul>
<li><p>A leading &ldquo;**&rdquo; followed by a slash means match in all directories. For example, &ldquo;**/foo&rdquo; matches file or directory &ldquo;foo&rdquo; anywhere, the same as pattern &ldquo;foo&rdquo;. &ldquo;**/foo/bar&rdquo; matches file or directory &ldquo;bar&rdquo; anywhere that is directly under directory &ldquo;foo&rdquo;.</p></li>
<li><p>A trailing &ldquo;/**&rdquo; matches everything inside. For example, &ldquo;abc/**&rdquo; matches all files inside directory &ldquo;abc&rdquo;, relative to the location of the .gitignore file, with infinite depth.</p></li>
<li><p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, &ldquo;a/**/b&rdquo; matches &ldquo;a/b&rdquo;, &ldquo;a/x/b&rdquo;, &ldquo;a/x/y/b&rdquo; and so on.</p></li>
<li><p>Other consecutive asterisks are considered invalid.</p></li>
</ul>


<h2>Notice</h2>

<p>Patterns read from a .gitignore file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file.</p>

<h2>gitignore file for xcode</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>## Build generated
</span><span class='line'># slash on the end, so we only remove the FOLDER, not any files that were badly named "DerivedData"
</span><span class='line'>build/
</span><span class='line'>DerivedData/
</span><span class='line'>
</span><span class='line'>#####
</span><span class='line'># Xcode private settings (window sizes, bookmarks, breakpoints, custom executables, smart groups)
</span><span class='line'>#
</span><span class='line'># This is complicated:
</span><span class='line'>#
</span><span class='line'># SOMETIMES you need to put this file in version control.
</span><span class='line'># Apple designed it poorly - if you use "custom executables", they are
</span><span class='line'>#  saved in this file.
</span><span class='line'># 99% of projects do NOT use those, so they do NOT want to version control this file.
</span><span class='line'>#  ..but if you're in the 1%, comment out the line "*.pbxuser"
</span><span class='line'>
</span><span class='line'># .pbxuser: http://lists.apple.com/archives/xcode-users/2004/Jan/msg00193.html
</span><span class='line'>
</span><span class='line'>*.pbxuser
</span><span class='line'>
</span><span class='line'># .mode1v3: http://lists.apple.com/archives/xcode-users/2007/Oct/msg00465.html
</span><span class='line'>
</span><span class='line'>*.mode1v3
</span><span class='line'>
</span><span class='line'># .mode2v3: http://lists.apple.com/archives/xcode-users/2007/Oct/msg00465.html
</span><span class='line'>
</span><span class='line'>*.mode2v3
</span><span class='line'>
</span><span class='line'># .perspectivev3: http://stackoverflow.com/questions/5223297/xcode-projects-what-is-a-perspectivev3-file
</span><span class='line'>
</span><span class='line'>*.perspectivev3
</span><span class='line'>
</span><span class='line'># also, whitelist the default ones, some projects need to use these
</span><span class='line'>!default.pbxuser
</span><span class='line'>!default.mode1v3
</span><span class='line'>!default.mode2v3
</span><span class='line'>!default.perspectivev3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># OPTION 1: ---------------------------------
</span><span class='line'>#     throw away ALL personal settings (including custom schemes!
</span><span class='line'>#     - unless they are "shared")
</span><span class='line'># As per build/ and DerivedData/, this ought to have a trailing slash
</span><span class='line'>#
</span><span class='line'># NB: this is exclusive with OPTION 2 below
</span><span class='line'>xcuserdata/
</span><span class='line'>
</span><span class='line'># OPTION 2: ---------------------------------
</span><span class='line'>#     get rid of ALL personal settings, but KEEP SOME OF THEM
</span><span class='line'>#     - NB: you must manually uncomment the bits you want to keep
</span><span class='line'>#
</span><span class='line'># NB: this *requires* git v1.8.2 or above; you may need to upgrade to latest OS X,
</span><span class='line'>#    or manually install git over the top of the OS X version
</span><span class='line'># NB: this is exclusive with OPTION 1 above
</span><span class='line'>#
</span><span class='line'>#xcuserdata/**/*
</span><span class='line'>
</span><span class='line'>#     (requires option 2 above): Personal Schemes
</span><span class='line'>#
</span><span class='line'>#!xcuserdata/**/xcschemes/*
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># Xcode 4 - semi-personal settings
</span><span class='line'>#
</span><span class='line'># Apple Shared data that Apple put in the wrong folder
</span><span class='line'># c.f. http://stackoverflow.com/a/19260712/153422
</span><span class='line'>#     FROM ANSWER: Apple says "don't ignore it"
</span><span class='line'>#     FROM COMMENTS: Apple is wrong; Apple code is too buggy to trust; there are no known negative side-effects to ignoring Apple's unofficial advice and instead doing the thing that actively fixes bugs in Xcode
</span><span class='line'># Up to you, but ... current advice: ignore it.
</span><span class='line'>*.xccheckout
</span><span class='line'>*.moved-aside
</span><span class='line'>*.xcuserstate
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># XCode 4 workspaces - more detailed
</span><span class='line'>#
</span><span class='line'># Workspaces are important! They are a core feature of Xcode - don't exclude them :)
</span><span class='line'>#
</span><span class='line'># Workspace layout is quite spammy. For reference:
</span><span class='line'>#
</span><span class='line'># /(root)/
</span><span class='line'>#   /(project-name).xcodeproj/
</span><span class='line'>#     project.pbxproj
</span><span class='line'>#     /project.xcworkspace/
</span><span class='line'>#       contents.xcworkspacedata
</span><span class='line'>#       /xcuserdata/
</span><span class='line'>#         /(your name)/xcuserdatad/
</span><span class='line'>#           UserInterfaceState.xcuserstate
</span><span class='line'>#     /xcshareddata/
</span><span class='line'>#       /xcschemes/
</span><span class='line'>#         (shared scheme name).xcscheme
</span><span class='line'>#     /xcuserdata/
</span><span class='line'>#       /(your name)/xcuserdatad/
</span><span class='line'>#         (private scheme).xcscheme
</span><span class='line'>#         xcschememanagement.plist
</span><span class='line'>#
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>## Obj-C/Swift specific
</span><span class='line'>*.hmap
</span><span class='line'>*.ipa
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># OPTIONAL: Some well-known tools that people use side-by-side with Xcode / iOS development
</span><span class='line'>#
</span><span class='line'># NB: I'd rather not include these here, but gitignore's design is weak and doesn't allow
</span><span class='line'>#     modular gitignore: you have to put EVERYTHING in one file.
</span><span class='line'>#
</span><span class='line'># COCOAPODS:
</span><span class='line'>#
</span><span class='line'># c.f. http://guides.cocoapods.org/using/using-cocoapods.html#what-is-a-podfilelock
</span><span class='line'># c.f. http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control
</span><span class='line'>#
</span><span class='line'>#!Podfile.lock
</span><span class='line'>#Pods
</span><span class='line'>#
</span><span class='line'># RUBY:
</span><span class='line'>#
</span><span class='line'># c.f. http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/
</span><span class='line'>#
</span><span class='line'>#!Gemfile.lock
</span><span class='line'>#
</span><span class='line'># IDEA:
</span><span class='line'>#
</span><span class='line'>#.idea
</span><span class='line'>#
</span><span class='line'># TEXTMATE:
</span><span class='line'>#
</span><span class='line'># -- UNVERIFIED: c.f. http://stackoverflow.com/a/50283/153422
</span><span class='line'>#
</span><span class='line'>#tm_build_errors
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># UNKNOWN: recommended by others, but I can't discover what these files are
</span><span class='line'>#
</span><span class='line'># Community suggestions (unverified, no evidence available - DISABLED by default)
</span><span class='line'>#
</span><span class='line'># 1. Xcode 5 - VCS file
</span><span class='line'>#
</span><span class='line'># "The data in this file not represent state of your project.
</span><span class='line'># If you'll leave this file in git - you will have merge conflicts during 
</span><span class='line'># pull your cahnges to other's repo"
</span><span class='line'>#
</span><span class='line'>#*.xccheckout
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Other File</h2>

<p>project.xcworkspace is a directory of files describing the workspace or projects. Although some of the answers here indicate it is unnecessary and should be ignored for source control, I don&rsquo;t agree, but it&rsquo;s going to be highly dependent upon how you use your environment. Generally, the contents of the project.xcworkspace directory contains the contents.xcworkspacedata file, which lists the projects that are included as top-level entities in your project, an xcuserdata directory, which contains each user&rsquo;s settings (should be ignored for source code controL), and xcshareddata, which is data shared by users who share a project, and should be under source control.</p>

<p>In environments where you don&rsquo;t share workspaces, or where you use simple workspaces, you can ignore these as well, however in environments where you put related projects in the same workspace and share that configuration, you may well want to keep these.</p>

<h2>Reference</h2>

<ol>
<li><a href="http://git-scm.com/docs/gitignore">http://git-scm.com/docs/gitignore</a></li>
<li><a href="http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects">http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM vs MVC vs MVP]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/01/mvvm-vs-mvc-vs-mvp/"/>
    <updated>2015-06-01T17:58:28+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/01/mvvm-vs-mvc-vs-mvp</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>MVC作为提倡的代码结构已经被广泛使用。但是随着使用越来越多，它的弊端也越来越明显。比如：Model管理数据，View管理UI相关，Controller协调Model和View。Controller因此包含了太多的property和Protocol的执行代码，这导致Controller职责太大，代码量也太大。 MVC已经不是Model-View-Controller， 而成为了Massive-View-Controller。</p>

<p>其次，我们应该把网络层相关code放到哪里？Model？网络请求通常都是异步的，如果网络请求的生命周期不完全属于这个Model呢？很明显我们也不能把网络代码放在View中。那么只能放到Controller中，这又进一步使MVC成了Massive-View-Controller。</p>

<!--more-->


<h2>Element</h2>

<h3>Model</h3>

<p>包含数据对象以及外部对数据操作的接口。</p>

<h3>View</h3>

<p>包含所有的UI显示及用户交互。为了提高重用性，工程里需要将相同的UI作为一个单独的View。</p>

<h2>MVC (Model-View-Controller)</h2>

<p><img class="center" src="http://hbwang85.github.io/images/mvc_mvvm/mvc.png"></p>

<p>Controller或者将UI事件传递给Model层，引起Model的数据改变或显示相应的View，或者选择显示下一个View。
Model通过Observer模式update View。</p>

<ol>
<li><p>一个Controller对应多个View；</p></li>
<li><p>Model的数据更新不通过Controller直接通知View。</p></li>
</ol>


<p>Disadvantage：</p>

<p>难于进行UT测试。如何从View角度评估Controller对数据的操作的结果？例如：用户点击的按钮，然后点击事件被传递给了Controller，Controller更新了Model的数据。Model通过Observer模式更新了View中的font size/color。</p>

<h2>MVP（Model-View-Presenter）</h2>

<ol>
<li>Objective-C中涉及的MVC等同于MVP；</li>
<li>一个Presenter只对应一个View；</li>
<li>与Controller有相同的地方，接收UI事件传递给Model层，update Model，但是Model的更新不会直接通知View，而是先通知Presenter，然后Presenter再通知View更新；</li>
</ol>


<h2>MVVM (Model-View-ViewModel)</h2>

<p><img class="center" src="http://hbwang85.github.io/images/mvc_mvvm/mvvm.png"></p>

<ol>
<li>ViewModel不同Model，可以理解为view的model，即包含View的一些属性和操作的Model;</li>
<li>View和ViewModel的通知是双向的，View的变化会直接作用于ViewModel，ViewModel的变化也会直接作用于View；</li>
<li>一个ViewModel对应一个View;</li>
<li>View包含View和ViewController, MVVM架构下，View应该足够简单，它应该只被用来显示当前UI的状态.</li>
</ol>


<h2>Summary</h2>

<p>几种模式主要区别在于粘合Model和View的方式以及实现用户交互操作机变更通知的方式。但是他们并没有太明确的界限，我们的最终目的是模块解耦，使每个模块都更轻量化，UT更容易。实际工作中经常不经意间融合几种模式在一起，不必太纠结。</p>

<h2>Reference</h2>

<ol>
<li><a href="http://joel.inpointform.net/software-development/mvvm-vs-mvp-vs-mvc-the-differences-explained/">http://joel.inpointform.net/software-development/mvvm-vs-mvp-vs-mvc-the-differences-explained/</a></li>
<li><a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开篇之作]]></title>
    <link href="http://hbwang85.github.io/blog/2015/05/29/kai-pian-zhi-zuo/"/>
    <updated>2015-05-29T17:52:43+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/05/29/kai-pian-zhi-zuo</id>
    <content type="html"><![CDATA[<p>Today I will start my new blog journey. I decided to share my blogs to page. This is my first blog, I will just list the command that being useful for deploy blog.</p>

<ol>
<li>rake new_post[“Blog Title”]</li>
<li>rake generate</li>
<li>rake preview</li>
<li>rake deploy</li>
</ol>


<h2>保存你的代码</h2>

<p>如前所述，rake deploy只是把生成的静态网页推送到了Github的Repo上去，但是你的博客的源码，就是这个octopress文件夹还需要地方保存，所以你可以新建一个Repo来保存源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git ci -s -m "Setup and config blogs for Github Pages"
</span><span class='line'>git remote add myrepo *some public or private repo*
</span><span class='line'>git push myrepo source</span></code></pre></td></tr></table></div></figure>


<p>You can learn more detail from <a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">Here</a>
and <a href="http://octopress.org/docs/blogging/">Here</a></p>
]]></content>
  </entry>
  
</feed>
