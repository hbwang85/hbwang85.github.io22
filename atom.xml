<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Henry Wang's Blog]]></title>
  <link href="http://hbwang85.github.io/atom.xml" rel="self"/>
  <link href="http://hbwang85.github.io/"/>
  <updated>2015-06-11T13:22:46+08:00</updated>
  <id>http://hbwang85.github.io/</id>
  <author>
    <name><![CDATA[HaiBin Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Edit Gitignore File for Xcode Project]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/11/how-to-edit-git-ignore-file/"/>
    <updated>2015-06-11T10:00:49+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/11/how-to-edit-git-ignore-file</id>
    <content type="html"><![CDATA[<p>A gitignore file specifies intentionallly untracked files that Git should ignore. Each line in a gitignore file sepecifies a pattern. We can see the detail as follows:</p>

<!--more-->


<p></p>

<h2>PATTERN FORMAT</h2>

<ul>
<li><p>A blank line matches no files, so it can serve as a separator for readability.</p></li>
<li><p>A line starting with # serves as a comment. Put a backslash (&ldquo;\&rdquo;) in front of the first hash for patterns that begin with a hash.</p></li>
<li><p>Trailing spaces are ignored unless they are quoted with backslash (&ldquo;\&rdquo;).</p></li>
<li><p>An optional prefix &ldquo;!&rdquo; which negates the pattern; any matching file excluded by a previous pattern will become included again. It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. Put a backslash (&ldquo;\&rdquo;) in front of the first &ldquo;!&rdquo; for patterns that begin with a literal &ldquo;!&rdquo;, for example, &ldquo;!important!.txt&rdquo;.</p></li>
<li><p>If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory. In other words, foo/ will match a directory foo and paths underneath it, but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works in general in Git).</p></li>
<li><p>If the pattern does not contain a slash /, Git treats it as a shell glob pattern and checks for a match against the pathname relative to the location of the .gitignore file (relative to the toplevel of the work tree if not from a .gitignore file).</p></li>
</ul>


<p>Two consecutive asterisks (&ldquo;**&rdquo;) in patterns matched against full pathname may have special meaning:</p>

<ul>
<li><p>A leading &ldquo;**&rdquo; followed by a slash means match in all directories. For example, &ldquo;**/foo&rdquo; matches file or directory &ldquo;foo&rdquo; anywhere, the same as pattern &ldquo;foo&rdquo;. &ldquo;**/foo/bar&rdquo; matches file or directory &ldquo;bar&rdquo; anywhere that is directly under directory &ldquo;foo&rdquo;.</p></li>
<li><p>A trailing &ldquo;/**&rdquo; matches everything inside. For example, &ldquo;abc/**&rdquo; matches all files inside directory &ldquo;abc&rdquo;, relative to the location of the .gitignore file, with infinite depth.</p></li>
<li><p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, &ldquo;a/**/b&rdquo; matches &ldquo;a/b&rdquo;, &ldquo;a/x/b&rdquo;, &ldquo;a/x/y/b&rdquo; and so on.</p></li>
<li><p>Other consecutive asterisks are considered invalid.</p></li>
</ul>


<h2>Notice</h2>

<p>Patterns read from a .gitignore file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file.</p>

<h2>gitignore file for xcode</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>## Build generated
</span><span class='line'># slash on the end, so we only remove the FOLDER, not any files that were badly named "DerivedData"
</span><span class='line'>build/
</span><span class='line'>DerivedData/
</span><span class='line'>
</span><span class='line'>#####
</span><span class='line'># Xcode private settings (window sizes, bookmarks, breakpoints, custom executables, smart groups)
</span><span class='line'>#
</span><span class='line'># This is complicated:
</span><span class='line'>#
</span><span class='line'># SOMETIMES you need to put this file in version control.
</span><span class='line'># Apple designed it poorly - if you use "custom executables", they are
</span><span class='line'>#  saved in this file.
</span><span class='line'># 99% of projects do NOT use those, so they do NOT want to version control this file.
</span><span class='line'>#  ..but if you're in the 1%, comment out the line "*.pbxuser"
</span><span class='line'>
</span><span class='line'># .pbxuser: http://lists.apple.com/archives/xcode-users/2004/Jan/msg00193.html
</span><span class='line'>
</span><span class='line'>*.pbxuser
</span><span class='line'>
</span><span class='line'># .mode1v3: http://lists.apple.com/archives/xcode-users/2007/Oct/msg00465.html
</span><span class='line'>
</span><span class='line'>*.mode1v3
</span><span class='line'>
</span><span class='line'># .mode2v3: http://lists.apple.com/archives/xcode-users/2007/Oct/msg00465.html
</span><span class='line'>
</span><span class='line'>*.mode2v3
</span><span class='line'>
</span><span class='line'># .perspectivev3: http://stackoverflow.com/questions/5223297/xcode-projects-what-is-a-perspectivev3-file
</span><span class='line'>
</span><span class='line'>*.perspectivev3
</span><span class='line'>
</span><span class='line'># also, whitelist the default ones, some projects need to use these
</span><span class='line'>!default.pbxuser
</span><span class='line'>!default.mode1v3
</span><span class='line'>!default.mode2v3
</span><span class='line'>!default.perspectivev3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># OPTION 1: ---------------------------------
</span><span class='line'>#     throw away ALL personal settings (including custom schemes!
</span><span class='line'>#     - unless they are "shared")
</span><span class='line'># As per build/ and DerivedData/, this ought to have a trailing slash
</span><span class='line'>#
</span><span class='line'># NB: this is exclusive with OPTION 2 below
</span><span class='line'>xcuserdata/
</span><span class='line'>
</span><span class='line'># OPTION 2: ---------------------------------
</span><span class='line'>#     get rid of ALL personal settings, but KEEP SOME OF THEM
</span><span class='line'>#     - NB: you must manually uncomment the bits you want to keep
</span><span class='line'>#
</span><span class='line'># NB: this *requires* git v1.8.2 or above; you may need to upgrade to latest OS X,
</span><span class='line'>#    or manually install git over the top of the OS X version
</span><span class='line'># NB: this is exclusive with OPTION 1 above
</span><span class='line'>#
</span><span class='line'>#xcuserdata/**/*
</span><span class='line'>
</span><span class='line'>#     (requires option 2 above): Personal Schemes
</span><span class='line'>#
</span><span class='line'>#!xcuserdata/**/xcschemes/*
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># Xcode 4 - semi-personal settings
</span><span class='line'>#
</span><span class='line'># Apple Shared data that Apple put in the wrong folder
</span><span class='line'># c.f. http://stackoverflow.com/a/19260712/153422
</span><span class='line'>#     FROM ANSWER: Apple says "don't ignore it"
</span><span class='line'>#     FROM COMMENTS: Apple is wrong; Apple code is too buggy to trust; there are no known negative side-effects to ignoring Apple's unofficial advice and instead doing the thing that actively fixes bugs in Xcode
</span><span class='line'># Up to you, but ... current advice: ignore it.
</span><span class='line'>*.xccheckout
</span><span class='line'>*.moved-aside
</span><span class='line'>*.xcuserstate
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># XCode 4 workspaces - more detailed
</span><span class='line'>#
</span><span class='line'># Workspaces are important! They are a core feature of Xcode - don't exclude them :)
</span><span class='line'>#
</span><span class='line'># Workspace layout is quite spammy. For reference:
</span><span class='line'>#
</span><span class='line'># /(root)/
</span><span class='line'>#   /(project-name).xcodeproj/
</span><span class='line'>#     project.pbxproj
</span><span class='line'>#     /project.xcworkspace/
</span><span class='line'>#       contents.xcworkspacedata
</span><span class='line'>#       /xcuserdata/
</span><span class='line'>#         /(your name)/xcuserdatad/
</span><span class='line'>#           UserInterfaceState.xcuserstate
</span><span class='line'>#     /xcshareddata/
</span><span class='line'>#       /xcschemes/
</span><span class='line'>#         (shared scheme name).xcscheme
</span><span class='line'>#     /xcuserdata/
</span><span class='line'>#       /(your name)/xcuserdatad/
</span><span class='line'>#         (private scheme).xcscheme
</span><span class='line'>#         xcschememanagement.plist
</span><span class='line'>#
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>## Obj-C/Swift specific
</span><span class='line'>*.hmap
</span><span class='line'>*.ipa
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># OPTIONAL: Some well-known tools that people use side-by-side with Xcode / iOS development
</span><span class='line'>#
</span><span class='line'># NB: I'd rather not include these here, but gitignore's design is weak and doesn't allow
</span><span class='line'>#     modular gitignore: you have to put EVERYTHING in one file.
</span><span class='line'>#
</span><span class='line'># COCOAPODS:
</span><span class='line'>#
</span><span class='line'># c.f. http://guides.cocoapods.org/using/using-cocoapods.html#what-is-a-podfilelock
</span><span class='line'># c.f. http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control
</span><span class='line'>#
</span><span class='line'>#!Podfile.lock
</span><span class='line'>#Pods
</span><span class='line'>#
</span><span class='line'># RUBY:
</span><span class='line'>#
</span><span class='line'># c.f. http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/
</span><span class='line'>#
</span><span class='line'>#!Gemfile.lock
</span><span class='line'>#
</span><span class='line'># IDEA:
</span><span class='line'>#
</span><span class='line'>#.idea
</span><span class='line'>#
</span><span class='line'># TEXTMATE:
</span><span class='line'>#
</span><span class='line'># -- UNVERIFIED: c.f. http://stackoverflow.com/a/50283/153422
</span><span class='line'>#
</span><span class='line'>#tm_build_errors
</span><span class='line'>
</span><span class='line'>####
</span><span class='line'># UNKNOWN: recommended by others, but I can't discover what these files are
</span><span class='line'>#
</span><span class='line'># Community suggestions (unverified, no evidence available - DISABLED by default)
</span><span class='line'>#
</span><span class='line'># 1. Xcode 5 - VCS file
</span><span class='line'>#
</span><span class='line'># "The data in this file not represent state of your project.
</span><span class='line'># If you'll leave this file in git - you will have merge conflicts during 
</span><span class='line'># pull your cahnges to other's repo"
</span><span class='line'>#
</span><span class='line'>#*.xccheckout
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ol>
<li><a href="http://git-scm.com/docs/gitignore">http://git-scm.com/docs/gitignore</a></li>
<li><a href="http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects">http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM vs MVC vs MVP]]></title>
    <link href="http://hbwang85.github.io/blog/2015/06/01/mvvm-vs-mvc-vs-mvp/"/>
    <updated>2015-06-01T17:58:28+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/06/01/mvvm-vs-mvc-vs-mvp</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>MVC作为提倡的代码结构已经被广泛使用。但是随着使用越来越多，它的弊端也越来越明显。比如：Model管理数据，View管理UI相关，Controller协调Model和View。Controller因此包含了太多的property和Protocol的执行代码，这导致Controller职责太大，代码量也太大。 MVC已经不是Model-View-Controller， 而成为了Massive-View-Controller。</p>

<p>其次，我们应该把网络层相关code放到哪里？Model？网络请求通常都是异步的，如果网络请求的生命周期不完全属于这个Model呢？很明显我们也不能把网络代码放在View中。那么只能放到Controller中，这又进一步使MVC成了Massive-View-Controller。</p>

<!--more-->


<h2>Element</h2>

<h3>Model</h3>

<p>包含数据对象以及外部对数据操作的接口。</p>

<h3>View</h3>

<p>包含所有的UI显示及用户交互。为了提高重用性，工程里需要将相同的UI作为一个单独的View。</p>

<h2>MVC (Model-View-Controller)</h2>

<p><img class="center" src="http://hbwang85.github.io/images/mvc_mvvm/mvc.png"></p>

<p>Controller或者将UI事件传递给Model层，引起Model的数据改变或显示相应的View，或者选择显示下一个View。
Model通过Observer模式update View。</p>

<ol>
<li><p>一个Controller对应多个View；</p></li>
<li><p>Model的数据更新不通过Controller直接通知View。</p></li>
</ol>


<p>Disadvantage：</p>

<p>难于进行UT测试。如何从View角度评估Controller对数据的操作的结果？例如：用户点击的按钮，然后点击事件被传递给了Controller，Controller更新了Model的数据。Model通过Observer模式更新了View中的font size/color。</p>

<h2>MVP（Model-View-Presenter）</h2>

<ol>
<li>Objective-C中涉及的MVC等同于MVP；</li>
<li>一个Presenter只对应一个View；</li>
<li>与Controller有相同的地方，接收UI事件传递给Model层，update Model，但是Model的更新不会直接通知View，而是先通知Presenter，然后Presenter再通知View更新；</li>
</ol>


<h2>MVVM (Model-View-ViewModel)</h2>

<p><img class="center" src="http://hbwang85.github.io/images/mvc_mvvm/mvvm.png"></p>

<ol>
<li>ViewModel不同Model，可以理解为view的model，即包含View的一些属性和操作的Model。</li>
<li>View和ViewModel的通知是双向的，View的变化会直接作用于ViewModel，ViewModel的变化也会直接作用于View；</li>
<li>一个ViewModel对应一个View。</li>
</ol>


<h2>Summary</h2>

<p>几种模式主要区别在于粘合Model和View的方式以及实现用户交互操作机变更通知的方式。但是他们并没有太明确的界限，我们的最终目的是模块解耦，使每个模块都更轻量化，UT更容易。实际工作中经常不经意间融合几种模式在一起，不必太纠结。</p>

<h2>Reference</h2>

<ol>
<li><a href="http://joel.inpointform.net/software-development/mvvm-vs-mvp-vs-mvc-the-differences-explained/">http://joel.inpointform.net/software-development/mvvm-vs-mvp-vs-mvc-the-differences-explained/</a></li>
<li><a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开篇之作]]></title>
    <link href="http://hbwang85.github.io/blog/2015/05/29/kai-pian-zhi-zuo/"/>
    <updated>2015-05-29T17:52:43+08:00</updated>
    <id>http://hbwang85.github.io/blog/2015/05/29/kai-pian-zhi-zuo</id>
    <content type="html"><![CDATA[<p>Today I will start my new blog journey. I decided to share my blogs to page. This is my first blog, I will just list the command that being useful for deploy blog.</p>

<ol>
<li>rake new_post[“Blog Title”]</li>
<li>rake generate</li>
<li>rake preview</li>
<li>rake deploy</li>
</ol>


<h2>保存你的代码</h2>

<p>如前所述，rake deploy只是把生成的静态网页推送到了Github的Repo上去，但是你的博客的源码，就是这个octopress文件夹还需要地方保存，所以你可以新建一个Repo来保存源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git ci -s -m "Setup and config blogs for Github Pages"
</span><span class='line'>git remote add myrepo *some public or private repo*
</span><span class='line'>git push myrepo source</span></code></pre></td></tr></table></div></figure>


<p>You can learn more detail from <a href="http://toughcoder.net/blog/2014/10/16/blogging-like-a-hacker-with-github-pages/">Here</a>
and <a href="http://octopress.org/docs/blogging/">Here</a></p>
]]></content>
  </entry>
  
</feed>
